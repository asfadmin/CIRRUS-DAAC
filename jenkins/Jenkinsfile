def get_deploy_name() {
  def matcher = (env.BRANCH_NAME =~ /(.+)-PR-.+/)
  return matcher ? matcher.group(1) : null
}

pipeline {
  parameters {
      choice(name: 'MATURITY', choices: ['dev', 'int', 'test', 'prod'], description: 'The MATURITY (AWS) account to deploy')
      string(name: 'DEPLOY_NAME', defaultValue: get_deploy_name() ?: 'daac', description: 'The name of the stack for this MATURITY')
      choice(name: 'AWS_REGION', choices: ['us-east-1', 'us-west-2'], description: 'AWS Region to deploy to')
      choice(name: 'MAKE_TARGET', choices: ['all', 'tf', 'daac', 'data-persistence', 'cumulus', 'workflows', 'cumulus_v9_2_0_upgrade'], description: 'What section of cumulus to deploy.')

      string(name: 'CORE_REPO', defaultValue: 'git@github.com:asfadmin/CIRRUS-core', description: 'The CIRRUS-core repo location')
      string(name: 'CORE_REF', defaultValue: 'v11.1.0.0', description: 'The CIRRUS-core git ref to check out. This needs to correspond with the correct version of Cumulus.')
  }

  environment {
    AWS_CREDS_BASE = 'daac-cumulus-core-aws_creds_'
    CMR_CREDS_BASE = 'daac-cumulus-core-cmr_creds_'
    URS_CREDS_BASE = 'daac-cumulus-core-urs_creds_'
    DB_CREDS_BASE = 'daac-cumulus-db_creds_'
    SECRET_TOKEN_BASE = 'daac-cumulus-core-token-'
  } // env

  agent { label 'docker' }

  stages {
    stage('Start Cumulus Deployment') {
      steps {
        sh "env"
      }
    }

    stage('Clone and checkout core repo/ref') {
      steps {
        sh """
          if [ ! -d \"CIRRUS-core\" ]; then
            git clone ${params.CORE_REPO} CIRRUS-core
          fi
          cd CIRRUS-core
          git fetch origin --tags
          git checkout ${params.CORE_REF}
          git submodule update --init --recursive
          # If working in a branch, we need to be sure to `git pull` new changes
          cat .git/HEAD | grep -q "ref: refs/heads"
          if [ \$? -eq 0 ]; then
              git pull
          fi
          cd ..
          tree
        """
      }
    }

    stage('Build core docker container') {
      steps {
        sh "cd ${WORKSPACE}/CIRRUS-core && docker build -f Dockerfile -t cirrus-core:${params.CORE_REF} ."
      }
    }

    stage('Deploy feature branch to DEV / sandbox') {
      when {
        branch '*-PR-*'
      }
      steps {
        echo "Deploy feature branch to DEV / sandbox"
        echo "Branch: ${env.BRANCH_NAME}"
        script {
          if (!get_deploy_name()) {
             error "Could not find a stack name in the branch ${env.BRANCH_NAME}"
          }
        }
        deploy(
          DEPLOY_NAME: params.DEPLOY_NAME,
          AWS_REGION: params.AWS_REGION,
          MATURITY: 'dev',
          CONTAINER_TAG: params.CORE_REF,
          MAKE_TARGET: params.MAKE_TARGET,
          AWS_CREDS: "${env.AWS_CREDS_BASE}sbx",
          CMR_CREDS: "${env.CMR_CREDS_BASE}UAT",
          URS_CREDS: "${env.URS_CREDS_BASE}UAT",
          DB_CREDS: "${env.DB_CREDS_BASE}sbx",
          SECRET_TOKEN_ID: "${env.SECRET_TOKEN_BASE}sbx"
        )
      }
    }

    stage('Deploy to DEV / sandbox') {
      when {
        branch 'master'
      }
      steps {
        echo "Deploy to DEV / sandbox"
        deploy(
          DEPLOY_NAME: params.DEPLOY_NAME,
          AWS_REGION: params.AWS_REGION,
          MATURITY: 'dev',
          CONTAINER_TAG: params.CORE_REF,
          MAKE_TARGET: params.MAKE_TARGET,
          AWS_CREDS: "${env.AWS_CREDS_BASE}sbx",
          CMR_CREDS: "${env.CMR_CREDS_BASE}UAT",
          URS_CREDS: "${env.URS_CREDS_BASE}UAT",
          DB_CREDS: "${env.DB_CREDS_BASE}sbx",
          SECRET_TOKEN_ID: "${env.SECRET_TOKEN_BASE}sbx"
        )
      }
    }

    stage('Deploy to INT / SIT') {
      when {
        tag pattern: "v\\d+\\.\\d+\\.\\d+", comparator: "REGEXP";
        not { environment name: 'MATURITY', value: "test" }
        not { environment name: 'MATURITY', value: "prod" }
      }
      steps {
        echo "Deploy tag to INT / SIT"
        deploy(
          DEPLOY_NAME: params.DEPLOY_NAME,
          AWS_REGION: params.AWS_REGION,
          MATURITY: 'int',
          CONTAINER_TAG: params.CORE_REF,
          MAKE_TARGET: params.MAKE_TARGET,
          AWS_CREDS: "${env.AWS_CREDS_BASE}sit",
          CMR_CREDS: "${env.CMR_CREDS_BASE}UAT",
          URS_CREDS: "${env.URS_CREDS_BASE}UAT",
          DB_CREDS: "${env.DB_CREDS_BASE}sit",
          SECRET_TOKEN_ID: "${env.SECRET_TOKEN_BASE}sit"
        )
      }
    }

    stage('Deploy tag to TEST') {
      when {
        environment name: 'MATURITY', value: "test"
      }
      steps {
        echo "Deploy tag to TEST"
        deploy(
          DEPLOY_NAME: params.DEPLOY_NAME,
          AWS_REGION: params.AWS_REGION,
          MATURITY: 'test',
          CONTAINER_TAG: params.CORE_REF,
          MAKE_TARGET: params.MAKE_TARGET,
          AWS_CREDS: "${env.AWS_CREDS_BASE}uat",
          CMR_CREDS: "${env.CMR_CREDS_BASE}UAT",
          URS_CREDS: "${env.URS_CREDS_BASE}UAT",
          DB_CREDS: "${env.DB_CREDS_BASE}uat",
          SECRET_TOKEN_ID: "${env.SECRET_TOKEN_BASE}uat"
        )
      }
    }

    stage('Deploy tag to PROD') {
      when {
        environment name: 'MATURITY', value: "prod"
      }
      steps {
        echo "Deploy tag to PROD"
        deploy(
          DEPLOY_NAME: params.DEPLOY_NAME,
          AWS_REGION: params.AWS_REGION,
          MATURITY: 'prod',
          CONTAINER_TAG: params.CORE_REF,
          MAKE_TARGET: params.MAKE_TARGET,
          AWS_CREDS: "${env.AWS_CREDS_BASE}prod",
          CMR_CREDS: "${env.CMR_CREDS_BASE}PROD",
          URS_CREDS: "${env.URS_CREDS_BASE}PROD",
          DB_CREDS: "${env.DB_CREDS_BASE}prod",
          SECRET_TOKEN_ID: "${env.SECRET_TOKEN_BASE}prod"
        )
      }
    }
  } // stages
} // pipeline


def deploy(params) {
  withEnv([
    "DEPLOY_NAME=${params.DEPLOY_NAME}",
    "AWS_REGION=${params.AWS_REGION}",
    "MATURITY=${params.MATURITY}",
    "CONTAINER_TAG=${params.CONTAINER_TAG}",
    "MAKE_TARGET=${params.MAKE_TARGET}",
    "CONTAINER_NAME_PREFIX=${env.JOB_NAME.replaceAll('/', '-')}"
  ]) {
    withCredentials([
      [$class: 'AmazonWebServicesCredentialsBinding', credentialsId: params.AWS_CREDS],
      usernamePassword(credentialsId: params.CMR_CREDS, passwordVariable: 'CMR_CREDS_PSW', usernameVariable: 'CMR_CREDS_USR'),
      usernamePassword(credentialsId: params.URS_CREDS, passwordVariable: 'URS_CREDS_PSW', usernameVariable: 'URS_CREDS_USR'),
      usernamePassword(credentialsId: params.DB_CREDS, passwordVariable: 'DB_CREDS_PSW', usernameVariable: ''),
      string(credentialsId: params.SECRET_TOKEN_ID, variable: 'TOKEN_SECRET')
    ])  {
      sh '''export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
            export AWS_ACCOUNT_ID_LAST4=$(echo -n $AWS_ACCOUNT_ID | tail -c 4)
            cd $WORKSPACE/CIRRUS-core
            docker run --rm   --user `id -u` \
                              --env DAAC_DIR="/CIRRUS-DAAC" \
                              --env BUILD_NUM="$BUILD_NUMBER" \
                              --env DEPLOY_NAME="$DEPLOY_NAME" \
                              --env MATURITY="$MATURITY" \
                              --env AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
                              --env AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
                              --env AWS_REGION="$AWS_REGION" \
                              --env AWS_ACCOUNT_ID_LAST4="$AWS_ACCOUNT_ID_LAST4" \
                              --env TF_VAR_cmr_username="$CMR_CREDS_USR" \
                              --env TF_VAR_cmr_password="$CMR_CREDS_PSW" \
                              --env TF_VAR_urs_client_id="$URS_CREDS_USR" \
                              --env TF_VAR_urs_client_password="$URS_CREDS_PSW" \
                              --env TF_VAR_token_secret="$TOKEN_SECRET" \
                              --env TF_VAR_db_admin_password="$DB_CREDS_PSW" \
                              -v "$WORKSPACE/CIRRUS-core":/CIRRUS-core \
                              -v "$WORKSPACE":/CIRRUS-DAAC \
                              --name=$CONTAINER_NAME_PREFIX-cirrus-core \
                              cirrus-core:$CONTAINER_TAG \
                              /bin/bash -c "make $MAKE_TARGET"
      '''
    }// withCredentials
  }
}
